pico-8 cartridge // http://www.pico-8.com
version 16
__lua__

local plyr
local time_t=0

-- world to cam
function project(x,y)
	return 64+x,64-y
end

function add_node(self,angle)
	return add(self.childs,{
 	childs={},
		parent=self,
		angle=angle,
		tabs=self.tabs..".",
		print=print_node,
		add=add_node,
		pop=pop_node
})		
end
function pop_node(self)
 -- remove self from parent
	del(self.parent.childs,self)
	return self.parent
end

function print_node(self,x,y,c)
	print(self.tabs..(self.angle or "root"),x,y,c)
	y+=6
	for i=1,#self.childs do
		y=self.childs[i]:print(x,y,c)
	end
	return y
end
	
local root_node={
 childs={},
 angle="?",
 tabs="",
		print=print_node,
		add=add_node,
		pop=pop_node
}

function fix_angle(angle)
	if(angle<0) angle+=1
	if(angle>1) angle-=1
	return angle
end

local directions={
 [0]="front",
 [1]="right",
 [2]="back",
 [3]="left"
}

function make_plyr()
	local x,y=0,0
	local sx,sy=0,0
	local angle,da=0,0
	local v=0
 local root=root_node
 local base_angle
 function scan()
 	-- scan world
 	local px,py=project(sx,sy)
 	return pget(px,py)
 end
 
 function get_dir()
  if(not base_angle) return "?"
	 angle=fix_angle(angle)
	 local a=360*angle
		if a<45 or a>315 then
		  return "east"
		elseif a>=45 and a<135 then
			return "north"
		elseif a>=135 and a<225 then
		 return "west"
		else
		 return "south"
		end
	end
 
 
	local self={
	 update=function(self)
	 	angle=fix_angle(angle)
			local cc,ss=cos(angle),-sin(angle)
			x+=1.2*v*cc
			y+=1.2*v*ss
			-- sensor position
			sx=x+4*cc
			sy=y+4*ss
			
			assert(coresume(self.update_async))
	 end,
		draw=function(self)
			local px,py=project(x,y)
			rspr(8,0,px-4,py-4,angle,1)

			px,py=project(sx,sy)
			pset(px,py,rnd()>0.5 and 8 or 2)
		
			local a=flr(360*angle)
			print(a,2,3,2)
			print(a,2,2,7)
			
			print(get_dir(),104,2,7)
		end
	}
	self.update_async=cocreate(
		function()
			local done
			local backtrack=false
			while not done do
 			local c=scan()
 			if c==12 then
 				-- track line
 				v=0.05
 				angle-=0.01
 				if(not base_angle) base_angle=angle
 			elseif c==10 then
 			 -- done
 			 v=0
 			 yield()
 			elseif c==11 then
 			 -- found dead end
 			 -- move past intersection
 				v=0.1
 				for i=0,50 do
 					yield()
 				end
 			 angle+=0.5
 			 v=0.05
 			 --
 			 -- backtrack=true
 			 root:add(get_dir())
 			 
 			 -- root=root:pop()
 			elseif c==8 then
 			 --move past intersection
 				v=0.1
 				for i=0,50 do
 					yield()
 				end
 				-- search angle
 				angle-=0.30
 				-- reset velocity
 				v=0
 				-- search segment
 				local found_angle=0
 				while scan()!=12 do
 					angle+=0.01
 					found_angle+=0.01
 					yield()
 				end
 				-- register
 				found_angle=flr(4*fix_angle(found_angle))
					
					if backtrack==true then
					 root:add(get_dir())
					 backtrack=false
					else
 					root:add(get_dir())
 			 end
 			else
 			 -- search line
 				v=0
 				angle+=0.01
 			end
	 		yield()
 		end
		end)
	return self
end

function _init()
	plyr=make_plyr()
end

function _update60()
	time_t+=1
	
end

function _draw()
	cls(0)

	map(0,0,0,0,16,16)	
	plyr:update()
	plyr:draw()
	
	root_node:print(2,12,2)	
end

-->8
-- sprite rotation
function rspr(sx,sy,x,y,a,w)
 local ca,sa=cos(a),-sin(a)
 local srcx,srcy
 local ddx0,ddy0=ca,sa
 local mask=shl(0xfff8,(w-1))
 w*=4	
 ca*=w-0.5
 sa*=w-0.5 
local dx0,dy0=sa-ca+w,-ca-sa+w
 w=2*w-1
 for ix=0,w do
  srcx,srcy=dx0,dy0
  for iy=0,w do
   if band(bor(srcx,srcy),mask)==0 then
   	local c=sget(sx+srcx,sy+srcy)
   	if(c!=14) pset(x+ix,y+iy,c)
  	end
   srcx-=ddy0
  	srcy+=ddx0
  end
  dx0+=ddx0
  dy0+=ddy0
 end
end

__gfx__
00000000eeeeeeee000cc0000000000000000000000cc000000cc000000cc0000000000000bbbb000000000000aaaa0000000000000000000000000000000000
00000000e777777e000cc0000000000000000000000cc000000cc000000cc0000000000000bbbb000000000000aaaa0000000000000000000000000000000000
007007007777dd7e000cc000000000000008800000088000000880000008800000088000000cc000bb000000000cc000aa000000000000000000000000000000
000770007767dd7e000cc000cccccccc008888cc008888cccc888800cc888800cc888800000cc000bbcccccc000cc000aacccccc000000000000000000000000
000770007767dd7e000cc000cccccccc008888cc008888cccc888800cc888800cc888800000cc000bbcccccc000cc000aacccccc000000000000000000000000
007007007777dd7e000cc000000000000008800000088000000880000008800000088000000cc000bb000000000cc000aa000000000000000000000000000000
00000000e777777e000cc00000000000000cc000000000000000000000000000000cc000000cc00000000000000cc00000000000000000000000000000000000
00000000eeeeeeee000cc00000000000000cc000000000000000000000000000000cc000000cc00000000000000cc00000000000000000000000000000000000
00000000000000000000000000000000000cc000000cc000000cc000000cc00000000000000cc00000000000000cc00000000000000000000000000000000000
00000000000000000000000000000000000cc000000cc000000cc000000cc00000000000000cc00000000000000cc00000000000000000000000000000000000
000000000000000000000000000000000008800000088000000880000008800000000000000cc000000000bb000cc000000000aa000000000000000000000000
00000000000000000000000000000000008888cccc8888cccc8888cccc88880000000000000cc000ccccccbb000cc000ccccccaa000000000000000000000000
00000000000000000000000000000000008888cccc8888cccc8888cccc88880000000000000cc000ccccccbb000cc000ccccccaa000000000000000000000000
000000000000000000000000000000000008800000088000000880000008800000000000000cc000000000bb000cc000000000aa000000000000000000000000
00000000000000000000000000000000000cc00000000000000cc000000cc0000000000000bbbb000000000000aaaa0000000000000000000000000000000000
00000000000000000000000000000000000cc00000000000000cc000000cc0000000000000bbbb000000000000aaaa0000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000008800000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000cc8888cc00000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000cc8888cc00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000008800000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000cc00000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000cc00000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000900000b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000200000200090000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000a03031603031603070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000200001900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000503030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
