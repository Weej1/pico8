pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
-- 3d bench
-- by freds72

-- ywing: {} = 0.2724

-- game globals
local time_t,time_dt=0,0

-- register json context here
local _tok={
 ['true']=true,
 ['false']=false}
function nop() return true end
local _g={
	nop=nop}

-- json parser
-- from: https://gist.github.com/tylerneylon/59f4bcf316be525b30ab
local table_delims={['{']="}",['[']="]"}
local function match(s,tokens)
	for i=1,#tokens do
		if(s==sub(tokens,i,i)) return true
	end
	return false
end
local function skip_delim(str, pos, delim, err_if_missing)
 if sub(str,pos,pos)!=delim then
  if(err_if_missing) assert'delimiter missing'
  return pos,false
 end
 return pos+1,true
end
local function parse_str_val(str, pos, val)
	val=val or ''
	if pos>#str then
		assert'end of input found while parsing string.'
	end
	local c=sub(str,pos,pos)
	if(c=='"') return _g[val] or val,pos+1
	return parse_str_val(str,pos+1,val..c)
end
local function parse_num_val(str,pos,val)
	val=val or ''
	if pos>#str then
		assert'end of input found while parsing string.'
	end
	local c=sub(str,pos,pos)
	-- support base 10, 16 and 2 numbers
	if(not match(c,"-xb0123456789abcdef.")) return tonum(val),pos
	return parse_num_val(str,pos+1,val..c)
end
-- public values and functions.

function json_parse(str, pos, end_delim)
	pos=pos or 1
	if(pos>#str) assert'reached unexpected end of input.'
	local first=sub(str,pos,pos)
	if match(first,"{[") then
		local obj,key,delim_found={},true,true
		pos+=1
		while true do
			key,pos=json_parse(str, pos, table_delims[first])
			if(key==nil) return obj,pos
			if not delim_found then assert'comma missing between table items.' end
			if first=="{" then
				pos=skip_delim(str,pos,':',true)  -- true -> error if missing.
				obj[key],pos=json_parse(str,pos)
			else
				add(obj,key)
			end
			pos,delim_found=skip_delim(str, pos, ',')
	end
	elseif first=='"' then
		-- parse a string (or a reference to a global object)
		return parse_str_val(str,pos+1)
	elseif match(first,"-0123456789") then
		-- parse a number.
		return parse_num_val(str, pos)
	elseif first==end_delim then  -- end of an object or array.
		return nil,pos+1
	else  -- parse true, false
		for lit_str,lit_val in pairs(_tok) do
			local lit_end=pos+#lit_str-1
			if sub(str,pos,lit_end)==lit_str then return lit_val,lit_end+1 end
		end
		assert'invalid json token'
	end
end

local actors,cam={}

-- zbuffer (kind of)
local drawables
function zbuf_clear()
	drawables={}
end
function zbuf_draw()
	local objs={}
	for _,d in pairs(drawables) do
		local p=d.pos
		local x,y,z,w=cam:project(p.x,p.y,p.z)
		if z>0 then
			add(objs,{obj=d,key=z,x=x,y=y,z=z,w=w})
		end
	end
	-- z-sorting
	sort(objs)
	-- actual draw
	for i=1,#objs do
		local d=objs[i]
		d.obj:draw(d.x,d.y,d.z,d.w)
	end
end

function zbuf_filter(array)
	for _,a in pairs(array) do
		if not a:update() then
			del(array,a)
		else
			add(drawables,a)
		end
	end
end

function clone(src,dst)
	-- safety checks
	if(src==dst) assert()
	if(type(src)!="table") assert()
	dst=dst or {}
	for k,v in pairs(src) do
		if(not dst[k]) dst[k]=v
	end
	-- randomize selected values
	if src.rnd then
		for k,v in pairs(src.rnd) do
			-- don't overwrite values
			if not dst[k] then
				dst[k]=v[3] and rndarray(v) or rndlerp(v[1],v[2])
			end
		end
	end
	return dst
end

function lerp(a,b,t)
	return a*(1-t)+b*t
end
function rndlerp(a,b)
	return lerp(b,a,1-rnd())
end
function smoothstep(t)
	t=mid(t,0,1)
	return t*t*(3-2*t)
end
function rndrng(ab)
	return flr(rndlerp(ab.x,ab.y))
end
function rndarray(a)
	return a[flr(rnd(#a))+1]
end

-- https://github.com/morgan3d/misc/tree/master/p8sort
function sort(data)
 for num_sorted=1,#data-1 do 
  local new_val=data[num_sorted+1]
  local new_val_key=new_val.key
  local i=num_sorted+1

  while i>1 and new_val_key>data[i-1].key do
   data[i]=data[i-1]   
   i-=1
  end
  data[i]=new_val
 end
end

function sqr_dist(a,b)
	local dx,dy,dz=b.x-a.x,b.y-a.y,b.z-a.z
	if abs(dx)>128 or abs(dy)>128 or abs(dz)>128 then
		return 32000
	end

	return dx*dx+dy*dy+dz*dz
end

-- world axis
local v_fwd,v_right,v_up,v_zero={x=0,y=0,z=1},{x=1,y=0,z=0},{x=0,y=1,z=0},{x=0,y=0,z=0}

function v_clone(v)
	return {x=v.x,y=v.y,z=v.z}
end
function v_dot(a,b)
	return a.x*b.x+a.y*b.y+a.z*b.z
end
function v_normz(v)
	local d=v_dot(v,v)
	if d>0.001 then
		d=sqrt(d)
		v.x/=d
		v.y/=d
		v.z/=d
	end
	return d
end

-- matrix functions
function m_x_v(m,v)
	local x,y,z=v.x,v.y,v.z
	v.x,v.y,v.z=m.m1*x+m.m5*y+m.m9*z+m.m13,m.m2*x+m.m6*y+m.m10*z+m.m14,m.m3*x+m.m7*y+m.m11*z+m.m15
end
-- 3x3 matrix mul (orientation only)
function o_x_v(m,v)
	local x,y,z=v.x,v.y,v.z
	v.x,v.y,v.z=m.m1*x+m.m5*y+m.m9*z,m.m2*x+m.m6*y+m.m10*z,m.m3*x+m.m7*y+m.m11*z
end
function m_x_xyz(m,x,y,z)
	return {
		x=m.m1*x+m.m5*y+m.m9*z+m.m13,
		y=m.m2*x+m.m6*y+m.m10*z+m.m14,
		z=m.m3*x+m.m7*y+m.m11*z+m.m15}
end
function make_m(p,r)
	r=r or 0
	p=p or v_zero
	local c,s=cos(r),-sin(r)
	local m={}
	m.m1,m.m2,m.m3,m.m4=c,0,s,0
	m.m5,m.m6,m.m7,m.m8=0,1,0,0
	m.m9,m.m10,m.m11,m.m12=-s,0,c,0
	m.m13,m.m14,m.m15,m.m16=p.x,p.y,p.z,1
	return m
end

-- only invert 3x3 part
function m_inv(m)
	m.m2,m.m5=m.m5,m.m2
	m.m3,m.m9=m.m9,m.m3
	m.m7,m.m10=m.m10,m.m7
end
-- inline matrix invert
-- inc. position
function m_inv_x_v(m,v)
	local x,y,z=v.x-m.m13,v.y-m.m14,v.z-m.m15
	v.x,v.y,v.z=m.m1*x+m.m2*y+m.m3*z,m.m5*x+m.m6*y+m.m7*z,m.m9*x+m.m10*y+m.m11*z
end
function m_set_pos(m,v)
	m.m13,m.m14,m.m15=v.x,v.y,v.z
end

-- returns foward vector from matrix
function m_fwd(m)
	return {x=m.m9,y=m.m10,z=m.m11}
end
-- returns up vector from matrix
function m_up(m)
	return {x=m.m5,y=m.m6,z=m.m7}
end

-- models
local all_models=json_parse'{"indycar":{"c":10}}'
local dither_pat=json_parse'[0b1111111111111111,0b0111111111111111,0b0111111111011111,0b0101111111011111,0b0101111101011111,0b0101101101011111,0b0101101101011110,0b0101101001011110,0b0101101001011010,0b0001101001011010,0b0001101001001010,0b0000101001001010,0b0000101000001010,0b0000001000001010,0b0000001000001000,0b0000000000000000]'

function draw_actor(self,x,y,z,w)
	-- distance culling
	if w>1 then
		draw_model(self.model,self.m,x,y,z,w)
	else
		circfill(x,y,1,self.model.c)
	end
end

-- unpack models
local mem=0x1000
function unpack_int()
	local i=peek(mem)
	mem+=1
	return i
end
function unpack_float(scale)
	local f=(unpack_int()-128)/32	
	return f*(scale or 1)
end
-- valid chars for model names
local itoa='_0123456789abcdefghijklmnopqrstuvwxyz'
function unpack_string()
	local s=""
	for i=1,unpack_int() do
		local c=unpack_int()
		s=s..sub(itoa,c,c)
	end
	return s
end
function unpack_models()
	-- for all models
	for m=1,unpack_int() do
		local model,name,scale={},unpack_string(),unpack_int()
		flip()
		-- vertices
		model.v={}
		for i=1,unpack_int() do
			add(model.v,{x=unpack_float(scale),y=unpack_float(scale),z=unpack_float(scale)})
		end
		
		-- faces
		model.f={}
		for i=1,unpack_int() do
			local f={p0=unpack_int(),ni=i,vi={}}
			for i=1,unpack_int() do
				add(f.vi,unpack_int())
			end
			-- center point
			f.center={x=unpack_float(scale),y=unpack_float(scale),z=unpack_float(scale)}
			add(model.f,f)
		end

		-- normals
		model.n={}
		for i=1,unpack_int() do
			add(model.n,{x=unpack_float(),y=unpack_float(),z=unpack_float()})
		end
		
		-- n.p cache	
		model.cp={}
		for i=1,#model.f do
			local f,n=model.f[i],model.n[i]
			add(model.cp,v_dot(n,model.v[f.p0]))
		end

		-- merge with existing model
		all_models[name]=clone(model,all_models[name])
	end
end

function p01_trapeze_h(l,r,lt,rt,y0,y1)
 lt,rt=(lt-l)/(y1-y0),(rt-r)/(y1-y0)
 if(y0<0)l,r,y0=l-y0*lt,r-y0*rt,0 
	y1=min(y1,128)
	for y0=y0,y1 do
  rectfill(l,y0,r,y0)
  l+=lt
  r+=rt
 end
end
function p01_trapeze_w(t,b,tt,bt,x0,x1)
 tt,bt=(tt-t)/(x1-x0),(bt-b)/(x1-x0)
 if(x0<0)t,b,x0=t-x0*tt,b-x0*bt,0 
 x1=min(x1,128)
 for x0=x0,x1 do
  rectfill(x0,t,x0,b)
  t+=tt
  b+=bt
 end
end
function trifill(x0,y0,x1,y1,x2,y2,col)
 color(col)
 if(y1<y0)x0,x1,y0,y1=x1,x0,y1,y0
 if(y2<y0)x0,x2,y0,y2=x2,x0,y2,y0
 if(y2<y1)x1,x2,y1,y2=x2,x1,y2,y1
 if max(x2,max(x1,x0))-min(x2,min(x1,x0)) > y2-y0 then
  col=x0+(x2-x0)/(y2-y0)*(y1-y0)
  p01_trapeze_h(x0,x0,x1,col,y0,y1)
  p01_trapeze_h(x1,col,x2,x2,y1,y2)
 else
  if(x1<x0)x0,x1,y0,y1=x1,x0,y1,y0
  if(x2<x0)x0,x2,y0,y2=x2,x0,y2,y0
  if(x2<x1)x1,x2,y1,y2=x2,x1,y2,y1
  col=y0+(y2-y0)/(x2-x0)*(x1-x0)
  p01_trapeze_w(y0,y0,y1,col,x0,x1)
  p01_trapeze_w(y1,col,y2,y2,x1,x2)
 end
end

function draw_model(model,m,x,y,z,w)

	-- cam pos in object space
	local cam_pos=v_clone(cam.pos)
	m_inv_x_v(m,cam_pos)
	
	-- faces
	local faces,p={},{}
	for i=1,#model.f do
		local f,n=model.f[i],model.n[i]
		-- viz calculation
		local d=n.x*cam_pos.x+n.y*cam_pos.y+n.z*cam_pos.z
		if d>=model.cp[i] then
			-- project vertices
			for _,vi in pairs(f.vi) do
				if not p[vi] then
					local v=model.v[vi]
					local x,y,z,w=v.x,v.y,v.z
					x,y,z,w=cam:project(m.m1*x+m.m5*y+m.m9*z+m.m13,m.m2*x+m.m6*y+m.m10*z+m.m14,m.m3*x+m.m7*y+m.m11*z+m.m15)
					p[vi]={x=x,y=y,z=z,w=w}
				end
			end
			-- distance to camera (in object space)
			local d=sqr_dist(f.center,cam_pos)

			-- register faces
			add(faces,{key=d,face=f})
		end
	end
	-- sort faces
	sort(faces)

	-- draw faces using projected points
	for _,f in pairs(faces) do
		f=f.face
		local p0=p[f.vi[1]]
	 	for i=2,#f.vi-1 do
		 	local p1,p2=p[f.vi[i]],p[f.vi[i+1]]
		 	trifill(p0.x,p0.y,p1.x,p1.y,p2.x,p2.y,model.c)
		end
	end
	fillp()
end

local all_actors=json_parse'{"car":{"model":"indycar","update":"nop"}}'

local wheel_scale=0.28
local wheel_v={
	{x=-wheel_scale,y=0,z=-wheel_scale},
	{x=wheel_scale,y=0,z=-wheel_scale},
	{x=0,y=0,z=-wheel_scale},
	{x=-wheel_scale,y=0,z=0},
	{x=wheel_scale,y=0,z=0},
	{x=0,y=0,z=0}
}
local front_wheel_v={
	{x=-wheel_scale,y=0,z=-0.3},
	{x=wheel_scale,y=0,z=-0.3},
	{x=0,y=0,z=-0.3},
	{x=-wheel_scale,y=0,z=0},
	{x=wheel_scale,y=0,z=0},
	{x=0,y=0,z=0}
}
local wheel_r,flat_r={},{}
for i=0,127 do
	local t=2*i/127-1
	wheel_r[i]=wheel_scale*sqrt(1-t*t)
	flat_r[i]=wheel_scale*1.1
end
for i=0,32 do
	local r=i/32
	flat_r[i]=wheel_scale*(1+0.1*r)
	flat_r[127-i]=wheel_scale*(1+0.1*r)
end

function draw_wheel(a,b,tex,top)
	if a.x>b.x then
		a,b=b,a
	end
	
	local t,invdx=0,1/(b.x-a.x)
	color(0)
	for x=a.x,b.x do
		local y,w=lerp(a.y,b.y,t),lerp(a.w,b.w,t)
		local u=t*b.w/w
		-- 1d texture for profile
		local r=w*tex[mid(flr(128*u),0,127)]
		rectfill(x,y-r,x,y+r-1)
		if top and r>top.w then
			top.x,top.y,top.w=x,y,w
		end
		t+=invdx
	end
end

function draw_tex_quad(a,b)
	palt(0,false)
	if a.x>b.x then
		a,b=b,a
	end
	
	local t,invdx=0,1/(b.x-a.x)
	color(0)
	for x=a.x,b.x do
		local y,w=lerp(a.y,b.y,t),lerp(a.w,b.w,t)
		local u=t*b.w/w
		w*=0.3
		sspr(48*u,0,1,16,x,y-1.5*w,1,1.5*w)
		t+=invdx
	end
 palt()
end
local quad_v={
	{x=-1.65,y=0.08,z=0.355},
	{x=-0.0,y=0.08,z=0.355}
}
function make_marker(p,angle)
	local a={
		pos=v_clone(p),
		angle=angle or 0,
		update=function(self)
			self.m=make_p(self.pos,self.angle)
			return true
		end,
		draw=function(self,x0,y0,z0,w0)
			local p,m={},self.m

			for vi=1,#quad_v do
				local v=quad_v[vi]
				local x,y,z,w=v.x,v.y,v.z
				x,y,z,w=cam:project(m.m1*x+m.m5*y+m.m9*z+m.m13,m.m2*x+m.m6*y+m.m10*z+m.m14,m.m3*x+m.m7*y+m.m11*z+m.m15)
				add(p,{x=x,y=y,z=z,w=w})
			end

			draw_tex_quad(p[1],p[2])
		end
	}
	return add(actors,a)
end

function make_wheel(p,angle,front)
	local a={
		v=front and front_wheel_v or wheel_v,
		pos=v_clone(p),
		angle=angle or 0,
		update=function(self)
			self.m=make_m(self.pos,self.angle)
			return true
		end,
		draw=function(self)
			local p,m={},self.m

			for vi=1,#self.v do
				local v=self.v[vi]
				local x,y,z,w=v.x,v.y,v.z
				x,y,z,w=cam:project(m.m1*x+m.m5*y+m.m9*z+m.m13,m.m2*x+m.m6*y+m.m10*z+m.m14,m.m3*x+m.m7*y+m.m11*z+m.m15)
				add(p,{x=x,y=y,z=z,w=w})
			end

			local a0,b0=p[3],p[6]

			-- draw ext side
			draw_wheel(p[1],p[2],wheel_r,a0)
			
			-- draw int side
			draw_wheel(p[4],p[5],wheel_r,b0)
			
			-- draw middle slice
			draw_wheel(a0,b0,flat_r)
			
		end
	}
	return a
end

local car_v={
 {x=-0.3,y=0.1,z=-2.2},
 {x=0.3,y=0.1,z=-2.2},
 {x=0.3,y=0.1,z=1},
 {x=-0.3,y=0.1,z=1}
}
function make_car(p,angle)
	local a={
		pos=v_clone(p),
		angle=angle or 0,
		update=function(self)
			self.m=make_m(self.pos,self.angle)
			for _,w in pairs(self.wheels) do
				w:update()
			end
			return true
		end,
		draw=function(self,x0,y0,z0,w0)
			local p,m={},self.m

			-- cam pos in object space
			local cam_pos=v_clone(cam.pos)
			m_inv_x_v(m,cam_pos)
	
			local cn=cam_pos.x
			
			for vi=1,#car_v do
				local v=car_v[vi]
				local x,y,z,w=v.x,v.y,v.z
				x,y,z,w=cam:project(m.m1*x+m.m5*y+m.m9*z+m.m13,m.m2*x+m.m6*y+m.m10*z+m.m14,m.m3*x+m.m7*y+m.m11*z+m.m15)
				add(p,{x=x,y=y,z=z,w=w})
			end
			
			if cn>=0 then
				self.wheels[1]:draw()
				self.wheels[2]:draw()
			end
			if cn<=0 then
				self.wheels[3]:draw()
				self.wheels[4]:draw()
			end
			
			local v1=p[#p]
			for i=1,#p do
				local v0=p[i]
				draw_tex_quad(v0,v1)
				v1=v0
			end
			if cn<=0 then
				self.wheels[1]:draw()
				self.wheels[2]:draw()
			end
			if cn>=0 then
				self.wheels[3]:draw()
				self.wheels[4]:draw()
			end
			
		end
	}
	a.wheels={
		make_wheel({x=0.6,y=0.3,z=0.6},flip_q,true),
 	-- front
 		make_wheel({x=-1.9,y=0.3,z=0.6},flip_q),
 		-- left side
 		make_wheel({x=0.6,y=0.3,z=-0.6},nil,true),
 	-- front
 		make_wheel({x=-1.9,y=0.3,z=-0.6})
	}
	
	return add(actors,a)
end

function make_head(p)
	local a={
		pos=v_clone(p),
		update=function(self)
			return true
		end,
		draw=function(self,x,y,z,w)
			circfill(x,y,0.15*w,1)
		end		
	}
	return add(actors,a)
end

function make_cam(f,x0,y0)
	x0,y0=x0 or 64,y0 or 64
	local c={
		pos={x=0,y=0,z=3},
		angle=0,
		focal=f,
		update=function(self)
			self.m=make_m(self.pos,self.angle)
			m_inv(self.m)
		end,
		track=function(self,pos,angle)
			self.pos=v_clone(pos)
			self.angle=angle
		end,
		project=function(self,x,y,z)
			-- world to view
			x-=self.pos.x
			y-=self.pos.y
			z-=self.pos.z
			local v=m_x_xyz(self.m,x,y,z)
			-- distance to camera plane
			if(v.z<0.001) return nil,nil,-1,nil
			-- view to screen
 			local w=self.focal/v.z
 			return x0+v.x*w,y0-v.y*w,v.z,w
		end
	}
	return c
end

local cam_angle,cam_dist=0.15,8

function _update()
	time_t+=1
	time_dt+=1
	
	zbuf_clear()
	
	zbuf_filter(actors)
	
	-- must be done after update loop
	if(btn(0)) cam_angle+=0.01
	if(btn(1)) cam_angle-=0.01
	if(btn(2)) cam_dist+=0.1
	if(btn(3)) cam_dist-=0.1
	cam_dist=mid(cam_dist,1,32)
	
	local m=make_m(v_zero,cam_angle)
	cam:track(m_x_xyz(m,0,0.8,-cam_dist),cam_angle)
	cam:update()
end

function _draw()
	cls(0)

	rectfill(0,0,127,63,12)
	rectfill(0,64,127,127,5)
	
	zbuf_draw()

	time_dt=0
	
	if(draw_stats) draw_stats()
end

function _init()
	-- read models from map data
	unpack_models()
	
	cam=make_cam(64)
	
	local i=0
 	make_car({x=0,y=0,z=5*i},0.25)
 	make_head({x=-0.3,y=0.68,z=5*i})
 	--make_marker({x=0,y=0,z=0},flip_q)

end

-->8
-- stats
local cpu_stats={}

function draw_stats()
	-- 
	fillp(0b1000100010001111)
	rectfill(0,0,127,9,0x10)
	fillp()
	local cpu,mem=stat(1),stat(0)
	cpu_stats[time_t%128+1]={flr(100*cpu),flr(100*(mem/2048))}
	for i=1,128 do
		local s=cpu_stats[(time_t+i)%128+1]
		if s then
			-- cpu
			local c,sy=11,s[1]
			if(sy>100) c=8 sy=100
			pset(i-1,9-9*sy/100,c)
		 -- mem
			c,sy=12,s[2]
			if(sy>90) c=8 sy=100
			pset(i-1,9-9*sy/100,c)
		end
	end
	if time_t%120>60 then
		print("cpu:"..cpu.."%",2,2,7)
	else
		print("mem:"..mem.."%",2,2,7)
	end
end

__gfx__
aaaaaaaaaaa8888aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000
aaaaaaaaaa877778aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000
0a0a0a0aaaa8888aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000
0a0a0a0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000
0a0a0a0aaaaa0000000000aaaaaaaaaaaaaaaaaaaaaaaaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000
aaaaaaaaaaaa0077000700aaaa33a33aa33aa33a33a33aaa00000000000000000000000000000000000000000000000000000000000000000000000000000000
aaaaaaaaaaaa0700707700aaaa3aa3a3a3a3a33a3aa33aaa00000000000000000000000000000000000000000000000000000000000000000000000000000000
aaaaaaaaaaaa0007000700aaaa33aa33aa33a3aa33a3a3aa00000000000000000000000000000000000000000000000000000000000000000000000000000000
aaaaaaaaaaaa0070000700aaaaaaaaaaaaaaaaaaaaaaaaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000
aaaaaaaaaaaa0777707770aaaaaaaaaaaaaaaaaaaaaaaaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000
aaaaaaaaaaaa0000000000aaaaaaaaaaaaaaaaaaaaaaaaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
10704191f042e0c0d110715738b45738c8b838b4b838c85719b45719c8b819b4b819c8a7380b68380ba7c84b68c84b5719c6b819c60859c6a75853a7f853a758
b4a7f8b468585368f8536858b468f8b40120402010506057a8c6604060b090207798e980408060d0e00819c710401030705008a8b4404040a0c0809898e94040
40807030b8a8c6904090b0c0a008882b60406080c0b008f8e9f030f05070083975703070e0f08829e5e030e0d0f00829c6d030d050f08729e5014001113121a7
a80461406171514168a80441404151110108a85371407131115108f8040106080806f758080a080808060af7580a08080837d9080a48080ac7c8e90808080a47
e9080608080a0808080806080a08
__sfx__
00020000085500d650086500955009550086500955008550086500955008650085500865008550076500855008550076500855007650085500865008650075500765007650076500755008650096500855009550
010f00002c060350503b0403e0403365029060216501e0501665015040116400d0400b6300a030076300803007630060300463004030036300263002640016400164001640016300163001630016300163001620
000100003c5503755034550315502f5502b5502565024550206501f5301b620185201161010550096500655004650036500265004550036500b50008500065000350001500015000000000000000000000000000
00020000026500a650146501765019650196501765015650126500e6500d6500b6500a65007650036400565004650026500165001650016500165001650026500265002650036500365003650036500265002650
0004000032450334602c4603235033460333602e3502e3502b450343402d4302c320333203a3203d330363302033025330224302f4302e33021350243402644026330284202632035430203301c320364201b320
000200081f5501f5501f5501d5501b550195501c5500f5500f55032450344501445022450224502c4502c4502c4502c4502c4502c4502c4502b4502b4502b4502b4502b4502b4502b4502b450000000000000000
000200081b560160501f540120401f550140601e550180502325015040116400d0400b6300a030076300803007630060300463004030036300263002640016400164001640016300163001630016300163001620
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000200081f6301f7301f6301e7301f6301f7301f630207301f2001f3001f2001e3001f2001f3001f200203001f2001f3001f2001e3001f2001f3001f200203000000000000000000000000000000000000000000
000200080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000200080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__music__
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000

