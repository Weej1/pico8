pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
-- 3d bench
-- by freds72

-- ywing: {} = 0.2724

-- game globals
local time_t,time_dt=0,0

-- register json context here
local _tok={
 ['true']=true,
 ['false']=false}
function nop() return true end
local _g={
	nop=nop}

-- json parser
-- from: https://gist.github.com/tylerneylon/59f4bcf316be525b30ab
local table_delims={['{']="}",['[']="]"}
local function match(s,tokens)
	for i=1,#tokens do
		if(s==sub(tokens,i,i)) return true
	end
	return false
end
local function skip_delim(str, pos, delim, err_if_missing)
 if sub(str,pos,pos)!=delim then
  if(err_if_missing) assert'delimiter missing'
  return pos,false
 end
 return pos+1,true
end
local function parse_str_val(str, pos, val)
	val=val or ''
	if pos>#str then
		assert'end of input found while parsing string.'
	end
	local c=sub(str,pos,pos)
	if(c=='"') return _g[val] or val,pos+1
	return parse_str_val(str,pos+1,val..c)
end
local function parse_num_val(str,pos,val)
	val=val or ''
	if pos>#str then
		assert'end of input found while parsing string.'
	end
	local c=sub(str,pos,pos)
	-- support base 10, 16 and 2 numbers
	if(not match(c,"-xb0123456789abcdef.")) return tonum(val),pos
	return parse_num_val(str,pos+1,val..c)
end
-- public values and functions.

function json_parse(str, pos, end_delim)
	pos=pos or 1
	if(pos>#str) assert'reached unexpected end of input.'
	local first=sub(str,pos,pos)
	if match(first,"{[") then
		local obj,key,delim_found={},true,true
		pos+=1
		while true do
			key,pos=json_parse(str, pos, table_delims[first])
			if(key==nil) return obj,pos
			if not delim_found then assert'comma missing between table items.' end
			if first=="{" then
				pos=skip_delim(str,pos,':',true)  -- true -> error if missing.
				obj[key],pos=json_parse(str,pos)
			else
				add(obj,key)
			end
			pos,delim_found=skip_delim(str, pos, ',')
	end
	elseif first=='"' then
		-- parse a string (or a reference to a global object)
		return parse_str_val(str,pos+1)
	elseif match(first,"-0123456789") then
		-- parse a number.
		return parse_num_val(str, pos)
	elseif first==end_delim then  -- end of an object or array.
		return nil,pos+1
	else  -- parse true, false
		for lit_str,lit_val in pairs(_tok) do
			local lit_end=pos+#lit_str-1
			if sub(str,pos,lit_end)==lit_str then return lit_val,lit_end+1 end
		end
		assert'invalid json token'
	end
end

local actors,cam,light={}

-- zbuffer (kind of)
local drawables
function zbuf_clear()
	drawables={}
end
function zbuf_draw()
	local objs={}
	for _,d in pairs(drawables) do
		local p=d.pos
		local x,y,z,w=cam:project(p.x,p.y,p.z)
		if z>0 then
			add(objs,{obj=d,key=z,x=x,y=y,z=z,w=w})
		end
	end
	-- z-sorting
	sort(objs)
	-- actual draw
	for i=1,#objs do
		local d=objs[i]
		d.obj:draw(d.x,d.y,d.z,d.w)
	end
end

function zbuf_filter(array)
	for _,a in pairs(array) do
		if not a:update() then
			del(array,a)
		else
			add(drawables,a)
		end
	end
end

function clone(src,dst)
	-- safety checks
	if(src==dst) assert()
	if(type(src)!="table") assert()
	dst=dst or {}
	for k,v in pairs(src) do
		if(not dst[k]) dst[k]=v
	end
	-- randomize selected values
	if src.rnd then
		for k,v in pairs(src.rnd) do
			-- don't overwrite values
			if not dst[k] then
				dst[k]=v[3] and rndarray(v) or rndlerp(v[1],v[2])
			end
		end
	end
	return dst
end

function lerp(a,b,t)
	return a*(1-t)+b*t
end
function rndlerp(a,b)
	return lerp(b,a,1-rnd())
end
function smoothstep(t)
	t=mid(t,0,1)
	return t*t*(3-2*t)
end
function rndrng(ab)
	return flr(rndlerp(ab.x,ab.y))
end
function rndarray(a)
	return a[flr(rnd(#a))+1]
end

-- https://github.com/morgan3d/misc/tree/master/p8sort
function sort(data)
 for num_sorted=1,#data-1 do 
  local new_val=data[num_sorted+1]
  local new_val_key=new_val.key
  local i=num_sorted+1

  while i>1 and new_val_key>data[i-1].key do
   data[i]=data[i-1]   
   i-=1
  end
  data[i]=new_val
 end
end

function sqr_dist(a,b)
	local dx,dy,dz=b.x-a.x,b.y-a.y,b.z-a.z
	if abs(dx)>128 or abs(dy)>128 or abs(dz)>128 then
		return 32000
	end

	return dx*dx+dy*dy+dz*dz
end

-- world axis
local v_fwd,v_right,v_up={x=0,y=0,z=1},{x=1,y=0,z=0},{x=0,y=1,z=0}

function v_clone(v)
	return {x=v.x,y=v.y,z=v.z}
end
function v_dot(a,b)
	return a.x*b.x+a.y*b.y+a.z*b.z
end
function v_normz(v)
	local d=v_dot(v,v)
	if d>0.001 then
		d=sqrt(d)
		v.x/=d
		v.y/=d
		v.z/=d
	end
	return d
end

-- matrix functions
function m_x_v(m,v)
	local x,y,z=v.x,v.y,v.z
	v.x,v.y,v.z=m.m1*x+m.m5*y+m.m9*z+m.m13,m.m2*x+m.m6*y+m.m10*z+m.m14,m.m3*x+m.m7*y+m.m11*z+m.m15
end
-- 3x3 matrix mul (orientation only)
function o_x_v(m,v)
	local x,y,z=v.x,v.y,v.z
	v.x,v.y,v.z=m.m1*x+m.m5*y+m.m9*z,m.m2*x+m.m6*y+m.m10*z,m.m3*x+m.m7*y+m.m11*z
end
function m_x_xyz(m,x,y,z)
	return {
		x=m.m1*x+m.m5*y+m.m9*z+m.m13,
		y=m.m2*x+m.m6*y+m.m10*z+m.m14,
		z=m.m3*x+m.m7*y+m.m11*z+m.m15}
end
function make_m(x,y,z)
	local m={}
	for i=1,16 do
		m["m"+i]=0
	end
	m.m1,m.m6,m.m11,m.m16=1,1,1,1
	m.m13,m.m14,m.m15=x or 0,y or 0,z or 0
	return m
end

-- quaternion
function make_q(v,angle)
	angle/=2
	-- fix pico sin
	local s=-sin(angle)
	return {x=v.x*s,
	        y=v.y*s,
	        z=v.z*s,
	        w=cos(angle)}
end
function q_clone(q)
	return {x=q.x,y=q.y,z=q.z,w=q.w}
end
function m_from_q(q)
	local x,y,z,w=q.x,q.y,q.z,q.w
	local x2,y2,z2=x+x,y+y,z+z
	local xx,xy,xz=x*x2,x*y2,x*z2
	local yy,yz,zz=y*y2,y*z2,z*z2
	local wx,wy,wz=w*x2,w*y2,w*z2

	return {
		m1=1-(yy+zz),m2=xy+wz,m3=xz-wy,m4=0,
		m5=xy-wz,m6=1-(xx+zz),m7=yz+wx,m8=0,
		m9=xz+wy,m10=yz-wx,m11=1-(xx+yy),m12=0,
		m13=0,m14=0,m15=0,m16=1
	}
end

-- only invert 3x3 part
function m_inv(m)
	m.m2,m.m5=m.m5,m.m2
	m.m3,m.m9=m.m9,m.m3
	m.m7,m.m10=m.m10,m.m7
end
-- inline matrix invert
-- inc. position
function m_inv_x_v(m,v)
	local x,y,z=v.x-m.m13,v.y-m.m14,v.z-m.m15
	v.x,v.y,v.z=m.m1*x+m.m2*y+m.m3*z,m.m5*x+m.m6*y+m.m7*z,m.m9*x+m.m10*y+m.m11*z
end
function m_set_pos(m,v)
	m.m13,m.m14,m.m15=v.x,v.y,v.z
end
-- returns foward vector from matrix
function m_fwd(m)
	return {x=m.m9,y=m.m10,z=m.m11}
end
-- returns up vector from matrix
function m_up(m)
	return {x=m.m5,y=m.m6,z=m.m7}
end

-- models
local all_models=json_parse'{"junk1":{"c":3,"r":1.2},"junk2":{"c":3,"r":1.2},"generator":{"c":6,"r":2}}'
local dither_pat=json_parse'[0b1111111111111111,0b0111111111111111,0b0111111111011111,0b0101111111011111,0b0101111101011111,0b0101101101011111,0b0101101101011110,0b0101101001011110,0b0101101001011010,0b0001101001011010,0b0001101001001010,0b0000101001001010,0b0000101000001010,0b0000001000001010,0b0000001000001000,0b0000000000000000]'

function draw_actor(self,x,y,z,w)
	-- distance culling
	if w>1 then
		draw_model(self.model,self.m,x,y,z,w)
	else
		circfill(x,y,1,self.model.c)
	end
end

-- unpack models
local mem=0x1000
function unpack_int()
	local i=peek(mem)
	mem+=1
	return i
end
function unpack_float(scale)
	local f=(unpack_int()-128)/32	
	return f*(scale or 1)
end
-- valid chars for model names
local itoa='_0123456789abcdefghijklmnopqrstuvwxyz'
function unpack_string()
	local s=""
	for i=1,unpack_int() do
		local c=unpack_int()
		s=s..sub(itoa,c,c)
	end
	return s
end
function unpack_models()
	-- for all models
	for m=1,unpack_int() do
		local model,name,scale={},unpack_string(),unpack_int()
		flip()
		-- vertices
		model.v={}
		for i=1,unpack_int() do
			add(model.v,{x=unpack_float(scale),y=unpack_float(scale),z=unpack_float(scale)})
		end
		
		-- faces
		model.f={}
		for i=1,unpack_int() do
			local f={p0=unpack_int(),ni=i,vi={}}
			for i=1,unpack_int() do
				add(f.vi,unpack_int())
			end
			-- center point
			f.center={x=unpack_float(scale),y=unpack_float(scale),z=unpack_float(scale)}
			add(model.f,f)
		end

		-- normals
		model.n={}
		for i=1,unpack_int() do
			add(model.n,{x=unpack_float(),y=unpack_float(),z=unpack_float()})
		end
		
		-- n.p cache	
		model.cp={}
		for i=1,#model.f do
			local f,n=model.f[i],model.n[i]
			add(model.cp,v_dot(n,model.v[f.p0]))
		end

		-- merge with existing model
		all_models[name]=clone(model,all_models[name])
	end
end

function p01_trapeze_h(l,r,lt,rt,y0,y1)
 lt,rt=(lt-l)/(y1-y0),(rt-r)/(y1-y0)
 if(y0<0)l,r,y0=l-y0*lt,r-y0*rt,0 
	y1=min(y1,128)
	for y0=y0,y1 do
  rectfill(l,y0,r,y0)
  l+=lt
  r+=rt
 end
end
function p01_trapeze_w(t,b,tt,bt,x0,x1)
 tt,bt=(tt-t)/(x1-x0),(bt-b)/(x1-x0)
 if(x0<0)t,b,x0=t-x0*tt,b-x0*bt,0 
 x1=min(x1,128)
 for x0=x0,x1 do
  rectfill(x0,t,x0,b)
  t+=tt
  b+=bt
 end
end
function trifill(x0,y0,x1,y1,x2,y2,col)
 color(col)
 if(y1<y0)x0,x1,y0,y1=x1,x0,y1,y0
 if(y2<y0)x0,x2,y0,y2=x2,x0,y2,y0
 if(y2<y1)x1,x2,y1,y2=x2,x1,y2,y1
 if max(x2,max(x1,x0))-min(x2,min(x1,x0)) > y2-y0 then
  col=x0+(x2-x0)/(y2-y0)*(y1-y0)
  p01_trapeze_h(x0,x0,x1,col,y0,y1)
  p01_trapeze_h(x1,col,x2,x2,y1,y2)
 else
  if(x1<x0)x0,x1,y0,y1=x1,x0,y1,y0
  if(x2<x0)x0,x2,y0,y2=x2,x0,y2,y0
  if(x2<x1)x1,x2,y1,y2=x2,x1,y2,y1
  col=y0+(y2-y0)/(x2-x0)*(x1-x0)
  p01_trapeze_w(y0,y0,y1,col,x0,x1)
  p01_trapeze_w(y1,col,y2,y2,x1,x2)
 end
end

local color_lo={1,1,13,6,7}
local color_hi={0x11,0xd0,0x60,0x70,0x70}
local dither_pat={0b1111111111111111,0b0111111111111111,0b0111111111011111,0b0101111111011111,0b0101111101011111,0b0101101101011111,0b0101101101011110,0b0101101001011110,0b0101101001011010,0b0001101001011010,0b0001101001001010,0b0000101001001010,0b0000101000001010,0b0000001000001010,0b0000001000001000,0b0000000000000000}

function draw_model(model,m,x,y,z,w)

	-- cam pos in object space
	local cam_pos=v_clone(cam.pos)
	m_inv_x_v(m,cam_pos)
	
	-- faces
	local faces,p={},{}
	for i=1,#model.f do
		local f,n=model.f[i],model.n[i]
		-- viz calculation
		local d=n.x*cam_pos.x+n.y*cam_pos.y+n.z*cam_pos.z
		if d>=model.cp[i] then
			-- project vertices
			for _,vi in pairs(f.vi) do
				if not p[vi] then
					local v=model.v[vi]
					local x,y,z=v.x,v.y,v.z
					x,y,z,w=cam:project(m.m1*x+m.m5*y+m.m9*z+m.m13,m.m2*x+m.m6*y+m.m10*z+m.m14,m.m3*x+m.m7*y+m.m11*z+m.m15)
					p[vi]={x=x,y=y,z=z,w=w}
				end
			end
			-- distance to camera (in object space)
			local d=sqr_dist(f.center,cam_pos)

			-- register faces
			add(faces,{key=d,face=f})
		end
	end
	-- sort faces
	sort(faces)

	-- draw faces using projected points
	for _,f in pairs(faces) do
		f=f.face
		local c=max((#color_lo-1)*v_dot(model.n[f.ni],light.u))
		-- get floating part
		local cf=(#dither_pat-1)*(1-(c-flr(c)))
		fillp(dither_pat[flr(cf)+1])
		c=bor(color_hi[flr(c)+1],color_lo[flr(c)+1])
		local p0=p[f.vi[1]]
	 	for i=2,#f.vi-1 do
		 	local p1,p2=p[f.vi[i]],p[f.vi[i+1]]
		 	trifill(p0.x,p0.y,p1.x,p1.y,p2.x,p2.y,c)
		end
	end
	fillp()
end

local all_actors=json_parse'{"generator":{"model":"generator","update":"nop"},"ground_junk":{"rnd":{"model":["junk1","junk1","junk2"]},"update":"nop"}}'

function make_npc(p,v,src)
	-- instance
	local a=clone(all_actors[src],{
		pos=v_clone(p),
		q=make_q(v,0),
		draw=draw_actor
	})
	a.model=all_models[a.model]

	-- init orientation
	local m=m_from_q(a.q)
	m_set_pos(m,p)
	a.m=m
	return add(actors,a)
end

function make_light_actor(r)
	local a={
		pos={x=r,y=0,z=0},
		u={x=-1,y=0,z=0},
		update=function(self)
			local t=time_t/128
			self.pos={
				x=r*cos(t),
				y=0,
				z=-r*sin(t)
			}
			self.u={
				x=cos(t),
				y=0,
				z=-sin(t)
			}
			return true
		end,
		draw=function(self,x,y,z,w)
			circfill(x,y,max(1,0.2*w),7)
		end
	}
	return add(actors,a)
end

function make_cam(f,x0,y0)
	x0,y0=x0 or 64,y0 or 64
	local c={
		pos={x=0,y=0,z=3},
		q=make_q(v_up,0),
		focal=f,
		update=function(self)
			self.m=m_from_q(self.q)
			m_inv(self.m)
		end,
		track=function(self,pos,q)
			self.pos=v_clone(pos)
			self.q=q
		end,
		project=function(self,x,y,z)
			-- world to view
			x-=self.pos.x
			y-=self.pos.y
			z-=self.pos.z
			local v=m_x_xyz(self.m,x,y,z)
			-- distance to camera plane
			v.z-=1
			if(v.z<0.001) return nil,nil,-1,nil
			-- view to screen
 			local w=self.focal/v.z
 			return x0+v.x*w,y0-v.y*w,v.z,w
		end
	}
	return c
end

local cam_angle,cam_dist=0.15,8
local model_catalog={"junk2","generator","mfalcon","ywing","xwing","vent","tie"}
local cur_model=1
local actor
function _update60()
	time_t+=1
	time_dt+=1
	
	zbuf_clear()

	actor.model=all_models[model_catalog[cur_model]]
	
	zbuf_filter(actors)
	
	-- must be done after update loop
	if(btn(0)) cam_angle+=0.01
	if(btn(1)) cam_angle-=0.01
	if(btn(2)) cam_dist+=0.1
	if(btn(3)) cam_dist-=0.1
	cam_dist=mid(cam_dist,1,32)
	
	if(btnp(4) or btnp(5)) cur_model+=1
	if(cur_model>#model_catalog) cur_model=1
	
	local q=make_q(v_up,cam_angle)
	local m=m_from_q(q)
	cam:track(m_x_xyz(m,0,2,-cam_dist),q)
	cam:update()
end

function _draw()
	cls(0)

	zbuf_draw()

	time_dt=0
	
	if(draw_stats) draw_stats()
end


function _init()
	-- read models from map data
	unpack_models()
	
	cam=make_cam(64)
	
	light=make_light_actor(5)

	actor=make_npc({x=0,y=0,z=0},v_up,"ground_junk")
end

-->8
-- stats
local cpu_stats={}

function draw_stats()
	-- 
	fillp(0b1000100010001111)
	rectfill(0,0,127,9,0x10)
	fillp()
	local cpu,mem=stat(1),stat(0)
	cpu_stats[time_t%128+1]={flr(100*cpu),flr(100*(mem/2048))}
	for i=1,128 do
		local s=cpu_stats[(time_t+i)%128+1]
		if s then
			-- cpu
			local c,sy=11,s[1]
			if(sy>100) c=8 sy=100
			pset(i-1,9-9*sy/100,c)
		 -- mem
			c,sy=12,s[2]
			if(sy>90) c=8 sy=100
			pset(i-1,9-9*sy/100,c)
		end
	end
	if time_t%120>60 then
		print("cpu:"..cpu.."%",2,2,7)
	else
		print("mem:"..mem.."%",2,2,7)
	end
end

__gfx__
0000000001d670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000156770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000012ef7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
c090f001c0f131e1f1c0d110f16738f8673898273848c63848962878a628d8e6282937283908080a4708e99608792608c8260847960896470826080806c80826
790896e90847e908c8790879c808e90a0808060808261808962808473808083808c83808792808e91808000050510291614010800a060a0a060606060606060a
6908696908a6a608a6a6086950504050807060080808104010506020c9e60820402060703008e64630403070804046e60850405010408008e6c950080a08f998
080898161698080898f930f1410110f3d89708379708270887e80887377808d87808e80888270888e9c708e908c7e94808e9084826c7082608c7264808260848
2608a526bad626ba3926086a2655392655d6e908a5e9bad6e9ba39e9086ae95539e955d6080809a768e867a88857b80867a887a768278708e8870827a7a7e867
6788575708676787a7a7270887e808278808070808278708872768a7e8a86788b85708a8678768a7278808e88808276868e8a8a888b8b808a8a8876868270888
e808e88808090808e8870888271360406040a0b05938d770407060b0c059383810401070c09059d7384040401090a059d7d75040508001f0b6383880408020d0
01b6d73820402030e0d0b6d7d730403050f0e0b638d7d340d3c3f102b7d848b330b3d1e1e748f8e340e3d30212b7d8c7c340c3b3e1f1c7a8b8f340f3e31222c7
a857f140f1e132806748b8224022123042674857e130e1d132c728f880408032526267c7b842404230829267c757323032d152c7e7f882408272c2d2b737c762
406252a2b2c767b892409282d2e2c7675772407262b2c2b73748523052d1a2e7c7f8b240b2a2f2034867b8e240e2d22333486757c240c2b20313583748a230a2
d1f228c7f8d240d2c213235837c7334033234053a8c75730403020728247a7b7f230f2d14348e7f83040301202504768b7034003f24370a8c7b85340534093a3
a8485720402080627247a758433043d1634828f842804292e23353a3f32208082750405002f180476858704070436373a848b8a340a393e3f348a85783408373
c3d358d848633063d1b32848f893409383d3e358d8c773407363b3c348a8b8404040608393c868b7604060707383c86858104010130370c8a758404040231310
c8a7b7135879b65879595896595896b6b77959b79659b796b6b779b647d988d788f947d9877769697769a6a69869a698a68738f9a67769a677a687d7f9473687
77a66977a6a6473688d787f998a66998a6a6c836883887f9c836876977a636478788d7f936c8876977696998a63647888838f908080636c8886998699869a6c8
d9883888f9c8d987986969d9c887d9c888d94788d94787503222419121101453799653790853793b75c80875c8e5c639e5f658e5c63908f6580827e808c639c4
f658c427e8c4bc7996bc7908bc793b9ac8089ac8e54939e51958e5493908195808e8e8084939c41958c4e8e8c453969653960853963b7547087547e5c6d6e5f6
b7e5c6d608f6b708272708c6d6c4f6b7c42727c4bc9696bc9608bc963b9a47089a47e549d6e519b7e549d60819b708e8270849d6c419b7c4e827c437377537e8
753737d837e8d8d83775d8e875d837d8d8e8d8a7b7aea758ae68b7ae6858ae08f7df925040506080402609f6b040b06070c0d6c855c040c090a0d0079866a040
a080b0d0f61966703070605056c8e540404080a09066c808214021115131e909f681408191413139c855914091a17161099866714071a1815119196641304121
31b9c8e5114011617151a9c808f140f1e122022607f6524052621202d64755624062724232077766424042725222f6f666123012f1025647e5e140e132422266
4708c240c2d2f2b2e907f6234023d2e233394755334033031343097766134013f2234319f666e230e2d2c2b947e5b240b2f21303a94708534053638373370827
c340c3b3f304a8088bb340b3c3a393d80827934093a36353080875734073b39353083727c340c38363a308e827043004f31448f72fb340b373d3f308779b8340
83c304e308989b73407383e3d367088bf330f3d31408c72fe330e3041408282fd330d3e314c7f72fb030b0c0d0f6c8c45230527262f647c423302333431947c4
813081a19119c8c49267e90806c708e9570879790808080608080aa8e9080ac70826570896790808080608080a672608064808e9b80879960808080608080aa8
26080a480826b80896960808080608080a0608080a08280a0808080806080608080a08e908a8080638080a3806082808166808e9a82608a80808060808060808
06080806504222419121100667d72567682567d72a67682aa8d725a86825a8d72aa8682a98d7bd77d85a7838cdf697fa77d7bd9738cd98d85a1997faa818e5a8
18570a18e50a185787682687688788682688688787a82687a88788a82688a8879a47480a97480a38489a88481b38481b97489a87a83ab7a83a18a89a48a8ea18
a8eab7a89a47f40a97f40a38f49a88f41b38f41b97f49ab7446ac7446a08449a1844ba0844bac7449a47d10a97d10a38d19a88d11b38d11b97d16718e5671857
0618e5061857754748069748063848758848f43848f497487587a8d5b7a8d518a87548a82518a825b7a87547f40697f40638f47588f4f438f4f497f475b744a5
c744a5084475184455084455c7447547d10697d10638d17588d1f438d1f497d1c708cd4808cdc7083e48083e931040102040306728a7a040a0f0b0e008880c70
4070806050a828a750405060201008282530403070501008d7a78040804020600868a7c040c0a0e0d05728fb70407030c00108b7aa014001c0d09008b73c3040
3040a0c047287a8040807001f0c8287af040f00190b0b828fb40404080f0a008a84a904090d0e0b00808cdc140c1a191b108a8d651405171b191088826814081
61a1c108888771407181c1b18888d66140615191a18788d6d140d1328222ca8778124012726202ca4878f140f15242e11ae7782240228272120be77802400262
52f15a4878e140e14232d15a8778224022e292d1da67a6024002c2d212da58a6e140e1a2b2f10ae7a6124012d2e2221be7a6f140f1b2c2024a58a6d140d192a2
e14a67a6924092f203a25a87a4e240e243f292ca87a4c240c22333d2ca38a4a240a20313b22ae7a4d240d23343e2fae7a4b240b21323c25a38a4426042526272
82329ae7a8f340f344a454458778344034248494454878144014046474f5e7784440443494a405e778244024147484b54878044004f35464b58778444044f3b4
053567a624402434f4e43558a604400414d4c406e7a63440344405f4f4e7a614401424e4d4c558a6f340f304c4b4c567a6b440b4c42515b587a4054005b41565
4587a4e440e4f455454538a4c440c4d43525e5e7a4f440f405655515e7a4d440d4e44535b538a464606454a494847475e7a89306080808f9680a080808080608
0608080a0836d848081677080638364847d94847d9d84808d8360887f9080a0808080608080a0a0808060808e88619e88919560819b908192789192786190946
0809c9080608080a080807c908074608278617e88617e88917460817c9081727891708080a278619278919b90819560819e88919e8861907460807c9080a0808
06080809c908094608e88617278617278917c90817460817e8891708080a4071a121a110b77ab7087a8708ba8708ca9708baa708bab708ba87083b88083bb808
4ba8084b98084b88080b88080bb808b9e808a90808f908080a38084a38085a0808aa08085ae808e9e80879a80879080829080829a808b8a808b8a808b89808d8
7808e85808e84808f83808e81808d81808b80808f70808f7480888480888580888580868880858a80858c80858d80868e80878e808ba0808bae8084be8087bd8
087b78085b68086b4808db4808db08084b08080b58080b08088bb8088b8808dba7088ba7087ba7087b97089b7708bb5708bb4708bb3708bb1708ab17088b0708
ca07084b47085b57085b57082b87081ba7081bc7082bd7083be7084be708dbe7082a07082ae708bae708ead7080bb7080b9708ea7708ca6708da47087a57087a
070899b708795708b95708d9e7081a0708c90708b93708793708690708a8670888070848070809070859e70848e70868870888e708c8e708e88708f8e708c807
082ab8080a58084a580819070869e708f7e708b9a808000060f102d1d101f110c0d83ba9d83bda373ba9373bda0a080a0a080606080606080aa90ca9a90c1766
0c17660ca950904090c0b0a0080c586040605090a0d9d92880408070b0c036d92870407060a0b008e986804080c0905008e9d950080a080a3808063808088816
08380a70f1d10191e0313060b00a060b0a060706060706060b0a080b0a080706080706080b67060b0a37070a3768000040120191f1108108080a960879060808
9608960808067908960a0808790879083969073909a639080739070839a60939076939080939090868095768b8076808576857086807b86857096808b868b801
80408001f0708998a8604060e0d050a89886404040c0b030869867204020a09010679889104010900180a89889704070f0e060899867504050d0c04067988630
4030b0a0208698a8c040c04131b0f6d897a040a021119097d81990409011810178d819f040f07161e019d897d040d05141c097d8f6b040b03121a0f6d8780140
018171f019d878e040e06151d078d8f601b9d8b8b8d85656d85757d8b9b8d8b9b9d85757d85656d8b8b9e8b8b8e85657e85656e8b8b8e8b9b9e85756e85757e8
b9708111c071e0a19130763bc77b3b87fa3b871a8bf77bcbd7facbd7d98b487bcb68facb68d93b787b3bb8fa3bb81afa487bba68faba688afaf77bbad7fabad7
8aba488a4bd79969a8d8ba488a7a68190a68e996783a26783ad5c83ad5293a26793a96793ad6293ad6c83a56f8f9bad78a98687c77481e844829844886d548a4
0848f33a48a48b48868b482998481e08c80977c8d817c85817c8b777c83708c80798c837f8c8b7f8c85898c8d87727d81727581727b7772737082707982737f8
27b7f827589827d808270977d71e84d72984d786d5d7a408d7f33ad7a48bd7868bd72998d71e98977c77687c77977cba488a4bd7994b489948b8b6c7b8b648a8
36c7a836c78875488875c798f54898f5c8b8e658b8b6f8a87688a846d888954988c5a89806199836b7b8b647b8e687a84617a876c688c5378895f69836679806
932040201040507bc73b3040302050608bb77a504050407080ab183b604060508090cb186a80408070a0b07b783b90409080b0c08b887ac040c0b0e0f00b989a
b040b0a0d0e00b783b4060401001d0a0703b187bf050f0e0112161ba18bae040e0d00111da183b2140211120300ba79a1140110110200bc73b30303041211bb7
1a60306041306bb7d9c040c0f081514a98b9904090c051719a9869f030f061816a683ae2a0e2f203132333435363d208c808f3a0f3e3d3c3b3a3938373040827
0842504252f2e2b48668dad250d26332b4e20898aaa240a2b253438a78e7924092a243330a7856824082923323c8787572407282231347787562406272130306
78565240526203f28578e794709422e484e3f3a48997da14401442b4c477082d24502414c473838697da3440342483938597e74440443493a306875654405444
__map__
3a3b747857460446453b3c8c7857470447463c3da07865480448473d3ea8797e3705374c4a3f408076aa4c044c4b234a8080c72304232c494a8980d22504252441425f80b926042625424348807d2704272643445280592804282744456f80452904292845469180452a042a294647ae80592b042b2a4748b8807d2c042c4d22
499a80c44f044f2b484eb68096090509174f1406b38398530453525051808a6754045455575680885b5b045b5a58598a8a695c045c5d5f5e8f885e630463626061768a6964046465676671885e1609162c36352b4f1715189986a9398f668c9064809e808ca080808f9a8c909c80709c80719a8c8080a060808062808c706480
71668c6a6d73886571789d8b889c726c809980a0808060807b9f8380a083869f80859f7d82a07b7ea07b7b9f7d7a9f80866184a080807a61847861807a617c7e617982617986617c8861808060848080a060808065809160808066806d7680628a80629a806da080809b80919b80918f7f6480a07b80a07b82a07b82a07b7ea0
7b7ea07b859f8309121019101d0c1f1a1d051c7a7a7a7a867a7a7a867a8686867a7a86867a867a868686867d838d7d7d8d837d8d83838d737d83737d7d73837d7383837d7d737d8373838373837d738d83838d7d838d7d7d8d837d80508a78507b88507b8090801902040204100f778580080408070b0c858089080408061815
898580060406021213808577030403070501807a800804080402068086800a040a090c0b80808d070407030a0b807b89040404080c0980858903040304090a7b80890e040e0f100d738080030403010e0d777b80040404030d10778085010401020f0e77807b1404141312118080730504050613148580770204020111127b80
77010401051411807b771604161518178d808007040708151689808506040605171889807b050405071617897b801903191c1b826c811b031b1c1a806c7d1a031a1c197e6c8119729d809d808e8e9d80809d7280608080a0808080a080638e809d8e63808e60808072638072809d7280638080609d8072638072806372a08080
8e809d8e80638e63809c8290808260648290051f1410230301428d79807379807280728e80727387808d87808e8088728088a17b80a18075a18580a180855f7b805f80755f85805f80858080907a868e768a88758b80768a787a806978808e7a7a8e76768875758076767880788e807288807080807278867a8e8a76888b7580
8a767886806988808e86868e8a8a888b8b808a8a7880888e808e88809080808e78808069939b8ca19098a1709893658c936560a17055a19055939b607a80599d80636380638680596d9b8c5f90985f70986d658c6d65605f70555f90556d9b6030060406040a0b97837a070407060b0c978383010401070c09977d8304040401
090a977d7a05040508100f698383080408020d10697d83020402030e0d697d7a030403050f0e69837a2c042c2b13147b8d842a032a11127e848f2d042d2c14157b8d7c2b042b2a12137c8a8b2303232404897c7113041312170876848b2e042e2d292484867112031211177c828f080408171819767c8b17031711187c7e8f1b
041b1a1e1f7b737c190419181c1d7c768b1a041a191d1e7b7384180318111c7e7c8f1d041d1c202184768b1e041e1d21228573841c031c1120827c8f1f041f1e222385737c1504152d2e167c8671030403021a1b747a792003201125847e8f0304031514057486792104212025078a7c8b02040208191a747a85250325112684
828f24032429048984710504051413087486850704072526278a848b240424231f2e847a71280428272b2c858d84260326112a82848f290429282c2d858d7c270427262a2b848a8b0404040628298c86790604060727288c86850104012221078c7a850404042322018c7a791b041b162e1f7c7a711603160315778471160316
1b03777c7130839d728397968369968363727d97967d69967d63727d9d72749d887d889f749d787796966d93916a89967a689478839f6a7796787d9f746378776a967463887d789f896a968c638883789f8c637886689464727a887d9f648e7a96779663748888839f6d6d91638c889689967a98948c9d8883889f8c9d788996
969c8e7a9d8c889d74889c727a869894936d9193939100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
00020000085500d650086500955009550086500955008550086500955008650085500865008550076500855008550076500855007650085500865008650075500765007650076500755008650096500855009550
010f00002c060350503b0403e0403365029060216501e0501665015040116400d0400b6300a030076300803007630060300463004030036300263002640016400164001640016300163001630016300163001620
000100003c5503755034550315502f5502b5502565024550206501f5301b620185201161010550096500655004650036500265004550036500b50008500065000350001500015000000000000000000000000000
00020000026500a650146501765019650196501765015650126500e6500d6500b6500a65007650036400565004650026500165001650016500165001650026500265002650036500365003650036500265002650
0004000032450334602c4603235033460333602e3502e3502b450343402d4302c320333203a3203d330363302033025330224302f4302e33021350243402644026330284202632035430203301c320364201b320
000200081f5501f5501f5501d5501b550195501c5500f5500f55032450344501445022450224502c4502c4502c4502c4502c4502c4502c4502b4502b4502b4502b4502b4502b4502b4502b450000000000000000
000200081b560160501f540120401f550140601e550180502325015040116400d0400b6300a030076300803007630060300463004030036300263002640016400164001640016300163001630016300163001620
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000200081f6301f7301f6301e7301f6301f7301f630207301f2001f3001f2001e3001f2001f3001f200203001f2001f3001f2001e3001f2001f3001f200203000000000000000000000000000000000000000000
000200080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000200080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__music__
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000
00 00000000

