pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
-- tiny sim
-- @yellowbaron, 3d engine @freds72
-- 3d math portions from threejs

local _tok={
  ['true']=true,
  ['false']=false}
function nop() return true end
local _g={
  cls=cls,
  clip=clip,
  map=map,
  print=print,
  line=line,
  spr=spr,
  sspr=sspr,
  pset=pset,
  rect=rect,
  rectfill=rectfill,
  sfx=sfx}

-- json parser
-- from: https://gist.github.com/tylerneylon/59f4bcf316be525b30ab
local table_delims={['{']="}",['[']="]"}
local function match(s,tokens)
  for i=1,#tokens do
    if(s==sub(tokens,i,i)) return true
  end
  return false
end
local function skip_delim(str, pos, delim, err_if_missing)
if sub(str,pos,pos)!=delim then
  --if(err_if_missing) assert'delimiter missing'
  return pos,false
end
return pos+1,true
end

local function parse_str_val(str, pos, val)
  val=val or ''
  --[[
  if pos>#str then
    assert'end of input found while parsing string.'
  end
  ]]
  local c=sub(str,pos,pos)
  -- lookup global refs
if(c=='"') return _g[val] or val,pos+1
  return parse_str_val(str,pos+1,val..c)
end
local function parse_num_val(str,pos,val)
  val=val or ''
  --[[
  if pos>#str then
    assert'end of input found while parsing string.'
  end
  ]]
  local c=sub(str,pos,pos)
  -- support base 10, 16 and 2 numbers
  if(not match(c,"-xb0123456789abcdef.")) return tonum(val),pos
  return parse_num_val(str,pos+1,val..c)
end
-- public values and functions.

function json_parse(str, pos, end_delim)
  pos=pos or 1
  -- if(pos>#str) assert'reached unexpected end of input.'
  local first=sub(str,pos,pos)
  if match(first,"{[") then
    local obj,key,delim_found={},true,true
    pos+=1
    while true do
      key,pos=json_parse(str, pos, table_delims[first])
      if(key==nil) return obj,pos
      -- if not delim_found then assert'comma missing between table items.' end
      if first=="{" then
        pos=skip_delim(str,pos,':',true)  -- true -> error if missing.
        obj[key],pos=json_parse(str,pos)
      else
        add(obj,key)
      end
      pos,delim_found=skip_delim(str, pos, ',')
  end
  elseif first=='"' then
    -- parse a string (or a reference to a global object)
    return parse_str_val(str,pos+1)
  elseif match(first,"-0123456789") then
    -- parse a number.
    return parse_num_val(str, pos)
  elseif first==end_delim then  -- end of an object or array.
    return nil,pos+1
  else  -- parse true, false
    for lit_str,lit_val in pairs(_tok) do
      local lit_end=pos+#lit_str-1
      if sub(str,pos,lit_end)==lit_str then return lit_val,lit_end+1 end
    end
    -- assert'invalid json token'
  end
end

local world={}
-- dither pattern 4x4 kernel
local dither_pat=json_parse'[0xffff.8,0x7fff.8,0x7fdf.8,0x5fdf.8,0x5f5f.8,0x5b5f.8,0x5b5e.8,0x5a5e.8,0x5a5a.8,0x1a5a.8,0x1a4a.8,0x0a4a.8,0x0a0a.8,0x020a.8,0x0208.8,0x0000.8]'

--3d
-- world axis
local v_fwd,v_right,v_up={0,0,1},{1,0,0},{0,1,0}

-- models & actors
local cam={}
local plyr={
 pos={0,10,5},
	bank=0,
	pitch=0
}

function _init()
 -- 3d
 -- viewport: 0,30,127,30
 cam=make_cam(64,64,64)
end

local t=0
function _update()
 	t+=1

		local dx,dy=0,0
 	if(btn(0)) dx=1
 	if(btn(1)) dx=-1
 	if(btn(2)) dy=1
 	if(btn(3)) dy=-1
 	
 	plyr.bank+=dx/64
 	plyr.pitch+=dy/64
 	
 	plyr.bank*=0.9
 	plyr.pitch*=0.9
 	
	 -- update cam
  cam:track(plyr.pos,make_m_from_euler(plyr.pitch,0,plyr.bank))

end

function _draw()
  cls(3)
  draw_ground()
	-- zbuf_draw()
  -- draw_clouds()

  -- shift tex map
  for i=31,1,-1 do
  	memcpy(i*64+4,(i-1)*64+4,16)
  end
  for i=0,32 do
  	sset(8+i,0,(t%16<8 and 11 or 3))
  end

  if plyr.bank>0.05 then
			spr(21,64-48/2,54,6,3)
  elseif plyr.bank<-0.05 then
			spr(21,64-48/2,54,6,3,true)
  elseif plyr.pitch>0.05 then
   spr(70,64-48/2,54,6,3)
  elseif plyr.pitch<-0.08 then
			spr(128,64-48/2,54,6,3)
  else
			spr(80,64-48/2,54,6,2)
		end
			  
		print(plyr.pitch,110,2,7)
		
  -- update first row
  -- perf monitor!
  --
  local cpu=(flr(1000*stat(1))/10).."%"
  ?cpu,2,3,2
  ?cpu,2,2,7
end

-->8
-- 3d engine @freds72

-- https://github.com/morgan3d/misc/tree/master/p8sort
function sort(data)
 for num_sorted=1,#data-1 do
  local new_val=data[num_sorted+1]
  local new_val_key,i=new_val.key,num_sorted+1

  while i>1 and new_val_key>data[i-1].key do
   data[i]=data[i-1]
   i-=1
  end
  data[i]=new_val
 end
end

-- clipplanes
local clipplanes=json_parse'[[0.707,0,-0.707,0.1767],[-0.707,0,-0.707,0.1767],[0,0.707,-0.707,0.1767],[0,-0.707,-0.707,0.1767],[0,0,-1,-0.25]]'

-- zbuffer (kind of)
function zbuf_draw(zfar)
	local objs={}

	for _,d in pairs(actors) do
		collect_drawables(d.model,d.m,d.pos,zfar,objs)
	end

	-- z-sorting
	sort(objs)

 -- actual draw
	for i=1,#objs do
		local d=objs[i]
  if d.kind==3 then
			project_poly(d.v,d.c)
	 else
   circfillt(d.x,d.y,d.r,light_shades[d.c])
  end
 end
end

function lerp(a,b,t)
	return a*(1-t)+b*t
end

function make_v(a,b)
	return {
		b[1]-a[1],
		b[2]-a[2],
		b[3]-a[3]}
end
function v_clone(v)
	return {v[1],v[2],v[3]}
end
function v_dot(a,b)
	return a[1]*b[1]+a[2]*b[2]+a[3]*b[3]
end
function v_scale(v,scale)
	v[1]*=scale
	v[2]*=scale
	v[3]*=scale
end
function v_add(v,dv,scale)
	scale=scale or 1
	v[1]+=scale*dv[1]
	v[2]+=scale*dv[2]
	v[3]+=scale*dv[3]
end

-- matrix functions
function m_x_v(m,v)
	local x,y,z=v[1],v[2],v[3]
	v[1],v[2],v[3]=m[1]*x+m[5]*y+m[9]*z+m[13],m[2]*x+m[6]*y+m[10]*z+m[14],m[3]*x+m[7]*y+m[11]*z+m[15]
end

function make_m_from_euler(x,y,z)
		local a,b = cos(x),-sin(x)
		local c,d = cos(y),-sin(y)
		local e,f = cos(z),-sin(z)
  
    -- yxz order
  local ce,cf,de,df=c*e,c*f,d*e,d*f
	 return {
	  ce+df*b,a*f,cf*b-de,0,
	  de*b-cf,a*e,df+ce*b,0,
	  a*d,-b,a*c,0,
	  0,0,0,1}
end

-- only invert 3x3 part
function m_inv(m)
	m[2],m[5]=m[5],m[2]
	m[3],m[9]=m[9],m[3]
	m[7],m[10]=m[10],m[7]
end
function m_set_pos(m,v)
	m[13],m[14],m[15]=v[1],v[2],v[3]
end
-- returns up vector from matrix
function m_up(m)
	return {m[5],m[6],m[7]}
end

-- sutherland-hodgman clipping
-- n.p is pre-multiplied in n[4]
function plane_poly_clip(n,v)
	local dist,allin={},0
	for i,a in pairs(v) do
		local d=n[4]-(a[1]*n[1]+a[2]*n[2]+a[3]*n[3])
		if(d>0) allin+=1
	 dist[i]=d
	end
 -- early exit
	if(allin==#v) return v
 if(allin==0) return {}

	local res={}
	local v0,d0,v1,d1,t,r=v[#v],dist[#v]
 -- use local closure
 local clip_line=function()
 	local r,t=make_v(v0,v1),d0/(d0-d1)
 	v_scale(r,t)
 	v_add(r,v0)
 	if(v0[4]) r[4]=lerp(v0[4],v1[4],t)
 	if(v0[5]) r[5]=lerp(v0[5],v1[5],t)
 	res[#res+1]=r
 end
	for i=1,#v do
		v1,d1=v[i],dist[i]
		if d1>0 then
			if(d0<=0) clip_line()
			res[#res+1]=v1
		elseif d0>0 then
   clip_line()
		end
		v0,d0=v1,d1
	end
	return res
end
function make_actor(model,p,angle)
  angle=angle and angle/360 or 0
	-- instance
	local a={
		pos=v_clone(p),
    model=all_models[model],
		-- north is up
		m=make_m_from_euler(0,angle-0.25,0)
  }

	-- init position
  m_set_pos(a.m,p)
	return a
end

function make_cam(x0,y0,focal)
	local c={
		pos={0,0,0},
		track=function(self,pos,m)
    self.pos=v_clone(pos)

		-- inverse view matrix
    self.m=m
    m_inv(self.m)
	 end,
		-- project cam-space points into 2d
    project2d=function(self,v)
  	  -- view to screen
  	  local w=focal/v[3]
  	  return x0+v[1]*w,y0-v[2]*w,w,v[4] and v[4]*w,v[5] and v[5]*w
		end,
		-- project cam-space points into 2d
    -- array version
    project2da=function(self,v)
  	  -- view to screen
  	  local w=focal/v[3]
  	  return {x0+v[1]*w,y0-v[2]*w,w,v[4] and v[4]*w,v[5] and v[5]*w}
		end
	}
	return c
end

function draw_clouds()
 local cloudy=-cam.pos[2]
 -- plane coords + u/v (32x32 texture)
 local cloudplane={
		{32,cloudy,32,32,0},
		{-32,cloudy,32,0,0},
		{-32,cloudy,-32,0,32},
		{32,cloudy,-32,32,64}}
 for _,v in pairs(cloudplane) do
  m_x_v(cam.m,v)
 end
	for i=1,#clipplanes do
	 cloudplane=plane_poly_clip(clipplanes[i],cloudplane)
	end
 project_texpoly(cloudplane)
end

local ddz=0
function draw_ground()
	-- draw horizon
	local zfar=-128
	local farplane={
			{-zfar,zfar,zfar},
			{-zfar,-zfar,zfar},
			{zfar,-zfar,zfar},
			{zfar,zfar,zfar}}
	-- cam up in world space
	local n=m_up(cam.m)

 local sky_gradient,y0={0,6,0,360,7,0,1440,12,0},cam.pos[2]

	for i=1,#sky_gradient,3 do
		-- ground location in cam space
    -- offset by sky layer ceiling
		-- or infinite (h=0) for clear sky
		local p={0,-sky_gradient[i]/120,0}
		if(horiz) p[2]+=y0
		m_x_v(cam.m,p)
		n[4]=v_dot(p,n)
		farplane=plane_poly_clip(n,farplane)
		fillp(sky_gradient[i+2])
  -- display
		project_poly(farplane,sky_gradient[i+1])
	end
  fillp()

		-- ground dots
	local scale=8
	local x0,z0=cam.pos[1],cam.pos[3]
	local dx,dz=x0%scale,(z0+4*time())%scale
 local c0,c1=3,11
	if ddz==130 then
		ddz=0
		c0,c1=3,11
	end
	ddz+=1

	 farplane={
			{0,0,0},
			{128,0,0},
			{128,128,0},
			{0,128,0}}

	-- screen space camera vector
	n={cos(plyr.bank-0.25),-sin(plyr.bank-0.25),0,0}
  for j=0,8 do
    local v={0,0,scale*(8-j)-dz+z0}
    v_add(v,cam.pos,-1)
    m_x_v(cam.m,v)
    local x,y,w=cam:project2d(v)
    if w>0 then
			n[4]=v_dot({x,y,0},n)
			farplane=plane_poly_clip(n,farplane)
			if(#farplane<2) break
			draw_poly2d(farplane,j%2==0 and c0 or c1)
      print(ddz,x,y,7)
    end
	end


end

function draw_poly2d(p,c)
	if #p>2 then
		local x0,y0=p[1][1],p[1][2]
    local x1,y1=p[2][1],p[2][2]
		for i=3,#p do
			local x2,y2=p[i][1],p[i][2]
			trifill(x0,y0,x1,y1,x2,y2,c)
		  x1,y1=x2,y2
		end
	end
end

function project_poly(p,c)
	if #p>2 then
		local x0,y0=cam:project2d(p[1])
    local x1,y1=cam:project2d(p[2])
		for i=3,#p do
			local x2,y2=cam:project2d(p[i])
			trifill(x0,y0,x1,y1,x2,y2,c)
		  x1,y1=x2,y2
		end
	end
end

function project_texpoly(p)
	if #p>2 then
		local p0,p1=cam:project2da(p[1]),cam:project2da(p[2])
		for i=3,#p do
			local p2=cam:project2da(p[i])
			tritex(p0,p1,p2)
			p1=p2
		end
	end
end

-->8
-- trifill
-- by @p01
function p01_trapeze_h(l,r,lt,rt,y0,y1)
  lt,rt=(lt-l)/(y1-y0),(rt-r)/(y1-y0)
  if(y0<0)l,r,y0=l-y0*lt,r-y0*rt,0
   for y0=y0,min(y1,128) do
   rectfill(l,y0,r,y0)
   l+=lt
   r+=rt
  end
end
function p01_trapeze_w(t,b,tt,bt,x0,x1)
 tt,bt=(tt-t)/(x1-x0),(bt-b)/(x1-x0)
 if(x0<0)t,b,x0=t-x0*tt,b-x0*bt,0
 for x0=x0,min(x1,128) do
  rectfill(x0,t,x0,b)
  t+=tt
  b+=bt
 end
end

function trifill(x0,y0,x1,y1,x2,y2,col)
 color(col)
 if(y1<y0)x0,x1,y0,y1=x1,x0,y1,y0
 if(y2<y0)x0,x2,y0,y2=x2,x0,y2,y0
 if(y2<y1)x1,x2,y1,y2=x2,x1,y2,y1
 if max(x2,max(x1,x0))-min(x2,min(x1,x0)) > y2-y0 then
  col=x0+(x2-x0)/(y2-y0)*(y1-y0)
  p01_trapeze_h(x0,x0,x1,col,y0,y1)
  p01_trapeze_h(x1,col,x2,x2,y1,y2)
 else
  if(x1<x0)x0,x1,y0,y1=x1,x0,y1,y0
  if(x2<x0)x0,x2,y0,y2=x2,x0,y2,y0
  if(x2<x1)x1,x2,y1,y2=x2,x1,y2,y1
  col=y0+(y2-y0)/(x2-x0)*(x1-x0)
  p01_trapeze_w(y0,y0,y1,col,x0,x1)
  p01_trapeze_w(y1,col,y2,y2,x1,x2)
 end
end

-->8
-- textured trifill
-- perspective correct
-- based off @p01 trifill
function trapezefill(l,dl,r,dr,start,finish)
	local l,dl={
		l[1],l[3],l[4],l[5],
		r[1],r[3],r[4],r[5]},{
		dl[1],dl[3],dl[4],dl[5],
		dr[1],dr[3],dr[4],dr[5]}
	local dt=1/(finish-start)
	for k,v in pairs(dl) do
		dl[k]=(v-l[k])*dt
	end

	-- cliping
	if start<0 then
		for k,v in pairs(dl) do
			l[k]-=start*v
		end
		start=0
	end

 -- cloud texture location + cam pos
 local cx,cz=cam.pos[1],cam.pos[3]
	-- rasterization
	for j=start,finish,4 do
		local len=l[5]-l[1]
		if len>0 then
   local w0,u0,v0=l[2],l[3],l[4]
    -- render every 4 pixels
			local dw,du,dv=shl(l[6]-w0,2)/len,shl(l[7]-u0,2)/len,shl(l[8]-v0,2)/len
   for i=l[1],l[5],4 do
    local sx,sy=(u0/w0)%32,(v0/w0)%32
    -- shift u/v map from cam pos+texture repeat
    -- local c=sget(8+band(sx*4-cx,31),band(sy*4-cz,31))
	   -- rectfill(i-2,j,i+1,j,c)
	   sspr(56,64,8,8,i-2-w0,j-w0,2*w0,2*w0)
				u0+=du
				v0+=dv
				w0+=dw
		 end
  end
		for k,v in pairs(dl) do
			l[k]+=4*v
		end
	end
	fillp()
end
function tritex(v0,v1,v2)
	local x0,x1,x2=v0[1],v1[1],v2[1]
	local y0,y1,y2=v0[2],v1[2],v2[2]
if(y1<y0)v0,v1,x0,x1,y0,y1=v1,v0,x1,x0,y1,y0
if(y2<y0)v0,v2,x0,x2,y0,y2=v2,v0,x2,x0,y2,y0
if(y2<y1)v1,v2,x1,x2,y1,y2=v2,v1,x2,x1,y2,y1

	-- mid point
	local v02,mt={},1/(y2-y0)*(y1-y0)
	for k,v in pairs(v0) do
		v02[k]=v+(v2[k]-v)*mt
	end
	if(x1>v02[1])v1,v02=v02,v1

	-- upper trapeze
	-- x u v
	trapezefill(v0,v1,v0,v02,y0,y1)
	-- lower trapeze
  trapezefill(v1,v2,v02,v2,y1,y2)
  -- reset fillp
  fillp()
end

__gfx__
00000000bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000333333333333333333333333333333330000000000000000000000011000000000000000000000000000000000000000000000000000000000000000
00000000333333333333333333333333333333330000000000000000000000177160000000000000000000000000000000000007000000000000000070000000
00000000333333333333333333333333333333330000000000000000000000171176600000000000000000000000000000000007000000000000000070000000
00000000333333333333333333333333333333330000000000000000000006111166776000000000000000000000000000000007000000011000000070000000
00000000333333333333333333333333333333330000000000000000000076771767777600000000000000000000000000000007700000177100000770000000
00000000333333333333333333333333333333330000000000000000006767776767777760000000000000000000000000000006700000111100000760000000
00000000333333333333333333333333333333330000000000000000067667776767776167777660000000000000000000000006700007177170000760000000
00000000333333333333333333333333333333330000000000000000777767766767771777777777777777700000000000000766717767677676771766700000
00000000bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb0000000000000067777667666777717777777777777776600000000067777766761776766767716766777776
00000000bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb0000000077000117777676766776766666666666666661100000677777777766777777677677777766777777
00000000bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb0000000067767761177777766776776111111111111110007777777761111616117767766776771161611116
00000000bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb0000000067766776667677766777776100000000000000001111111110067111111667677676611111176001
00000000bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb0000000066776776777777676677771100000000000000000000000077777187a11677611677611a78177777
00000000bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb000000677677666777767666667616677760000000000000000007777761118f7116677777766117f8111677
00000000bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb0000077776777677767676661661166777777760000000000000011111100118811616666661611881100111
00000000bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb0007777666677767766776711111117777777777760000000000000000000011116101111110161111000000
00000000333333333333333333333333333333330677776100676167676776711771111666666666000000000000000000000000000000000000000000000000
00000000333333333333333333333333333333337776611006161116676667718e7e110111111111000000000000000000000000000000000000000000000000
00000000333333333333333333333333333333337611100071111111677777761881100000000000000000000000000000000000000000000000000000000000
00000000333333333333333333333333333333331100006761111116767771611111100000000000000000000000000000000000000000000000000000000000
00000000333333333333333333333333333333330000077761877111167661100111000000000000000000000000000000000000000000000000000000000000
000000003333333333333333333333333333333300067776118e7111011110000000000000000000000000000000000000000000000000000000000000000000
00000000333333333333333333333333333333330077771101181110000000000000000000000000000000000000000000000000000000000000000000000000
00000000333333333333333333333333333333330676110000111000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000007000000000000007000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000007000000000000007000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000007000000000000007000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000007600000000000067000000000000000000000000000000000000000000000000
00000000000000070000000000000000700000000000000000000000000000007700000000000077000000000000000000000000000000000000000000000000
00000000000000070000000000000000700000000000000000000000000000007600000000000067000000000000000000000000000000000000000000000000
00000000000000070000000110000000700000000000000000000000000000111160077777700611110000000000000000000000000000000000000000000000
00000000000000077000001771000007700000000000000000000777700001188117766666677118811000077770000000000000000000000000000000000000
000000000000000670000011110000076000000000000000000000666677718e7116655555566117e81777666600000000000000000000000000000000000000
00000000000000067000071771700007600000000000000077700011166661877111666116661117781666611100077700000000000000000000000000000000
00000000000007667177676776767717667000000000000066667777755661111111666776661111111665577777666600000000000000000000000000000000
00000000677777667617767667677167667777760000000011166666677766111111666666661111116677766666611100000000000000000000000000000000
00006777777777667777776776777777667777777776000000011166666776761171565665651711676776666611100000000000000000000000000000000000
77777777611116161177677667767711616111167777777700000011166666677776166666616777766666611100000000000000000000000000000000000000
11111111100671111116676776766111111760011111111100000000011166666777616666167776666611100000000000000000000000000000000000000000
0000000077777187a11677611677611a781777770000000000000000000011177676661661666767711100000000000000000000000000000000000000000000
000007777761118f7116677777766117f81116777770000000000000000000011766610110166671100000000000000000000000000000000000000000000000
00000111111001188116166666616118811001111110000000000000000000000111100000011110000000000000000000000000000000000000000000000000
00000000000000111161011111101611110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000099999900000000000000000000000000000000000000000000000000000000000000000
000000000000000000000001100000000000000000000000000000009a4aaa990000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000177100000000000000000000000000000044449aa90000000000000000000000000000000000000000000000000000000000000000
00000000000000000000001661000000000000000000000000000000144444440000000000000000000000000000000000000000000000000000000000000000
00000000000000000000061111600000000000000000000000000000011111100000000000000000000000000000000000000000000000000000000000000000
00000000000000000000671661760000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000077676776767700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000700677676776767760070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000766777776776777776670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000777777676776767777770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000076771177777667777711776700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000077776777767767777677677776777700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000077777777777777767777677777777777777700000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077777777777677677776776777767767777777777700000000000000000000000000000000000000000000000000000000000000000000000000000000000
77777777776616677676776776776767766166777777777700000000000000000000000000000000000000000000000000000000000000000000000000000000
67777761111107676776777667776776767011111677777600000000000000000000000000000000000000000000000000000000000000000000000000000000
11111110000066171166776776776611716600000111111100000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000007761111116776776776111111677000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000777761111116771111776111111677770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000077777661877116777777776117781667777700000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000077777111118e7111667777661117e81111177777000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00001111100001188100116666110018811000011111000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000011000001111000001110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
