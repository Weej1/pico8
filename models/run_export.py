import os
from subprocess import Popen, PIPE
import re
import tempfile

local_dir = os.path.dirname(os.path.realpath(__file__))
blender_dir = os.path.expandvars("%programfiles%/Blender Foundation/Blender")

def call(args):
    proc = Popen(args, stdout=PIPE, stderr=PIPE)
    out, err = proc.communicate()
    exitcode = proc.returncode
    #
    return exitcode, out, err

# file_list = ['deathstar','junk2','tie','xwing','ywing','title','turret','trench1','vent','mfalcon','generator','tiex1']
# file_list = ['audi','audi_bbox','vtree']
file_list = ['205gti','205gti_bbox','road_cone']
s = "{:02x}".format(len(file_list))
for blend_file in file_list:
    print("Exporting: {}.blend".format(blend_file))
    fd, path = tempfile.mkstemp()
    try:
        os.close(fd)
        exitcode, out, err = call([os.path.join(blender_dir,"blender.exe"),os.path.join(local_dir,blend_file + ".blend"),"--background","--python",os.path.join(local_dir,"blender_export_uv.py"),"--","--out",path])
        if err:
            raise Exception('Unable to loadt: {}. Exception: {}'.format(blend_file,err))
        print("exit: {} \n out:{}\n err: {}\n".format(exitcode,out,err))
        with open(path, 'r') as outfile:
            s = s + outfile.read()
    finally:
        os.remove(path)

# extra data
s = s + "ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00b20008a20948db0008a40948d70008830911a212510948d50008830911a4128209d20008830911a7128209d10008830911a8128209ce0008830911ab128209cd0008830911ab120a0901ca00088309118d120a94094a88120a830901950008840948af00088309118d120a95091187120a830901950008860948ad000809118d120a8309018e004184091187120a8309019300088309118412510948ac0082098d120a8309018f000883091187120a83090193000883091186128209ac0082098a120a83090191000883091187120a83090191000883091189128209ac00820989120a83090191000883091187120a8309019100088309118a12510948ab00820986120a830901930008091189120a8309018f00088309118e12510948a9000809118612830901930008091189120a8309018f000883091190128209a8000809118712820901930008091189120a09018d000885091193128209a800820987120a0901930008091189120a09018d000885091194128209a800820986120a090191000883091189120a09018b00088509118d120a82094a86128209a80082098612820991000883091189120a09018b00088509118d120a84098612510948a70082098612820990000883091187120a8309018900088509118d120a8309014182098712510948a6008209861282098f000883091187120a8309018900088509118d120a830901820041094a87128209a6008209861282098e000883091187120a8309018700088309118d120a850901860041094a86128209a6008209861282098d000883091187120a8309018700088309118d120a850901880082098612510948a5008209861282098c000883091187120a8309018500088309118d120a8509018b0082098712510948a30008091185120a09018b000883091188128409488400088309118d120a8509018c0041094a87128209a20008091185120a09018b000809118b128a09118d120a850901900041094a86128209a2008209861282098c0082098c12518809118d120a8509019200820986128209a2008209861282098c008209a0120a8309019700820986128209a2008209861282098c0082099f120a830901980082098612510948a1008209861282098c0082099c120a8309019b0082098712510948a0008209861282098c0041094a9a120a8309019c0041094a87128209a0008209861282098d00418b094a8c120a830901a00041094a861282099f00080911861282098e00418b094a8a120a830901a100088209861282099e00080911871282099900418c0901a300088309861282099e00820987120a09019a00418a0901a40083091185120a09019e00820986120a0901cb0082091185120a09019f00820986128209cc00820986128209a000820986128209cc00820986128209a00082098612510948ca0008091186128209a00082098712510948c80008091187128209a00041094a8712510948c700820987120a0901a10041094a8712510948c600820986120a0901a30082094a87128209c600820986128209a40083094a86128209c600820986128209a4004183098612510948c40008091185120a0901a5004182098712510948c20008091185120a0901a70041094a8712820948c100820986128209a90041094a8612830948c000820986128209aa0082098612518309bf0008091186128209aa0082098712518209be0008091187128209aa0041094a8712510948bd00820987120a0901ab0041094a8712510948bc00820986120a0901ad0041094a87128209bc00820986128209af0041094a86128209bc00820986128209b00082098612510948ba0008091185120a8209b00082098712510948b80008091185120a8309b00041094a8712510948b6000882098612830901b10041094a8712510948b4000883098612820901b30082094a87128209b40083091186128209b40083094a86128209b40082091187128209b4004183098612510948b20008091187120a0901b5004182098712510948b00008091187120a0901b70041094a8712820948ae0008820987120a0901b90041094a8612830948ac0008830986120a0901bb0082098612518309ac0083091186128209bc0082098712518209ac0082091187128209bc0041094a8712510948aa0008091187120a0901bd0041094a871251850948a40008091187120a0901bf0041094a871251850948a20008091187120a0901c10041094a8b12518509489c0008091187120a0901c30082098c12518509489b00820987120a8209c40082099112518509489600820986120a8309c40041094a91125185094894000809118612830901c5004185094a9112519609118712820901c7004185094a91125194091187120a0901cd004185094aa8120a0901cf004185094aa6120a8209d5004185094aa0120a8309d6004185094a9f12830901db004185094a9a12820901dd004185094a98120a0901e300419a0901e50041980901ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ca009f00200007409c00470777743000128233454095005783776655567682664095005784777435551222850011108f00478377741088000244428f00578377738900157775108e00678377608900268277208e00578377208900268277408e00378377108900168277518e00078277748a00038277738e00028277618a0001577776108d00038277308b00354344208600011185001367741095002311850013677510940001321085001577751094000151860015777510940003518600157776209400025186002682771094000273111310830017777620950067555720830026777510950047766640830015777510950037533330830015777510950026200020830015776310950005100011830013665310950003100015830013566496000520002610820004665310950004533357508200135764108600128e00027666777182001357763085000275108e006782777382001367773185001775108e0007827774820003677751850077758f000482777482000167776284000777758c00011100048277748200038277518400827775108b0026662007827775820024827741830005827775108a0001827771278277740001378277628300478377308bc772085000182006322870001578b777486001082004182001182218300038b7776208600018200211123456764108200047555887762208800830014837776308300011135558577628a008300016782777630870017777666228b00840016777666308700016422208c0085003653319800a000a0000c14290a190d0c1508240816141f15320c361631232a2d202d163c0000000000000000000000000000000000000000000000000000000000071a230c18231415231b1223300f23320a23152723132b23282b232b2f23112923142523"

# pico-8 map format
# first 4096 bytes -> gfx (shared w/ map)
# second 4096 bytes -> map
if len(s)>=2*8192:
    raise Exception('Data string too long ({})'.format(len(s)))

tmp=s[:8192]
print("__gfx__")
# swap bytes
gfx_data = ""
for i in range(0,len(tmp),2):
    gfx_data = gfx_data + tmp[i+1:i+2] + tmp[i:i+1]
print(re.sub("(.{128})", "\\1\n", gfx_data, 0, re.DOTALL))

map_data=s[8192:]
if len(map_data)>0:
    print("__map__")
    print(re.sub("(.{256})", "\\1\n", map_data, 0, re.DOTALL))

